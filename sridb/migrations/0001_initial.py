# Generated by Django 5.1.3 on 2025-04-10 20:18

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('citydb', '0006_alter_abstractconstruction_table_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method_type', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assessor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('organization', models.CharField(max_length=100)),
                ('certification_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BuildingInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('climate_zone', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('year_of_construction', models.IntegerField(blank=True, null=True)),
                ('total_floor_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('number_of_floors', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnergySystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_type', models.CharField(max_length=50)),
                ('efficiency_score', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='FunctionalityDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SRIAssessor',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('email', models.CharField(blank=True, max_length=1000, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('organisation', models.CharField(blank=True, max_length=1000, null=True)),
                ('phonenumber', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'SRI_assessor',
            },
        ),
        migrations.CreateModel(
            name='SRIBuilding',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.building')),
                ('buildingstate', models.CharField(blank=True, choices=[('Original', 'Original'), ('NormalRefurbishment', 'Normal Refurbishment'), ('AdvancedRefurbishment', 'Advanced Refurbishment'), ('Other', 'Other')], max_length=1000, null=True)),
                ('buildingusage', models.CharField(blank=True, choices=[('NonResidentialEducational', 'Non-Residential Educational'), ('NonResidentialHealthcare', 'Non-Residential Healthcare'), ('NonResidentialOffice', 'Non-Residential Office'), ('ResidentialLargeMultiFamilyHouse', 'Residential Large Multi-Family House'), ('ResidentialSmallMultiFamilyHouse', 'Residential Small Multi-Family House'), ('ResidentialSingleFamilyHouse', 'Residential Single-Family House'), ('ResidentialOther', 'Residential Other'), ('Other', 'Other')], max_length=1000, null=True)),
                ('climatezone', models.CharField(blank=True, choices=[('NorthEastEurope', 'North East Europe'), ('NorthEurope', 'North Europe'), ('WestEurope', 'West Europe'), ('SouthEastEurope', 'South East Europe'), ('SouthEurope', 'South Europe'), ('Other', 'Other')], max_length=1000, null=True)),
                ('location', models.CharField(blank=True, max_length=1000, null=True)),
                ('sribuildingtype', models.CharField(blank=True, choices=[('Residential', 'Residential'), ('NonResidential', 'Non-Residential'), ('Other', 'Other')], max_length=1000, null=True)),
                ('usefulfloorarea', models.DecimalField(blank=True, decimal_places=2, help_text='Useful floor area in square meters', max_digits=15, null=True)),
            ],
            options={
                'db_table': 'SRI_building',
            },
        ),
        migrations.CreateModel(
            name='SRIDomain',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('category', models.CharField(blank=True, choices=[('dynamicBuildingEnvelope', 'Dynamic Building Envelope'), ('heating', 'Heating'), ('electricVehicleCharging', 'Electric Vehicle Charging'), ('cooling', 'Cooling'), ('lighting', 'Lighting'), ('monitoringAndControl', 'Monitoring and Control'), ('ventilation', 'Ventilation'), ('domesticHotWater', 'Domestic Hot Water')], max_length=1000, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'SRI_domain',
            },
        ),
        migrations.CreateModel(
            name='SRIFunctionalitylevel',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('functionalitylevel', models.IntegerField(blank=True, null=True)),
                ('id_1', models.CharField(blank=True, max_length=1000, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'SRI_functionalitylevel',
            },
        ),
        migrations.CreateModel(
            name='SRILevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_name', models.CharField(max_length=50, unique=True)),
                ('level_value', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('valid_for_building_part', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SRIMethodology',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('preferredservicecatalogue', models.CharField(blank=True, max_length=1000, null=True)),
                ('preferredweightings', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'SRI_methodology',
            },
        ),
        migrations.CreateModel(
            name='SRIUsecase',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('title', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'SRI_usecase',
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
                ('score', models.FloatField()),
                ('description', models.TextField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('valid_until', models.DateTimeField()),
                ('preferred_service_catalogue', models.CharField(blank=True, max_length=100, null=True)),
                ('method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sridb.assessmentmethod')),
                ('assessor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sridb.assessor')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('service_id', models.CharField(max_length=20, unique=True)),
                ('functionality_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('technical_domain', models.CharField(choices=[('heating', 'Heating'), ('cooling', 'Cooling'), ('domestic_hot_water', 'Domestic Hot Water'), ('ventilation', 'Ventilation'), ('lighting', 'Lighting'), ('dynamic_building_envelope', 'Dynamic Building Envelope'), ('electricity', 'Electricity'), ('electric_vehicle_charging', 'Electric Vehicle Charging'), ('monitoring_control', 'Monitoring & Control')], max_length=50)),
                ('desired_impact', models.CharField(choices=[('energy_efficiency', 'Energy Efficiency'), ('maintenance_fault_prediction', 'Maintenance & Fault Prediction'), ('comfort', 'Comfort'), ('convenience', 'Convenience'), ('health', 'Health'), ('wellbeing_accessibility', 'Well-being & Accessibility'), ('information_to_occupants', 'Information to Occupants'), ('energy_flexibility_storage', 'Energy Flexibility & Storage')], max_length=50)),
                ('is_applicable', models.BooleanField(default=True)),
                ('preconditions', models.TextField(blank=True, null=True)),
                ('triage_score', models.IntegerField(default=0, help_text='0-3 score indicating if service affects maximum obtainable score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('part_a', models.BooleanField(default=False, help_text='A-1: YES, 0-NO')),
                ('part_b', models.BooleanField(default=False, help_text='B-1: YES, 0-NO')),
                ('part_c', models.BooleanField(default=False, help_text='Part of the custom services list')),
                ('description', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sridb.functionalitydescription')),
                ('sri_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sridb.srilevel')),
            ],
            options={
                'ordering': ['technical_domain', 'service_id'],
            },
        ),
        migrations.AddField(
            model_name='functionalitydescription',
            name='meta_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sridb.service'),
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('building_id', models.CharField(max_length=50, unique=True)),
                ('has_building_part', models.BooleanField(default=False)),
                ('assessments', models.ManyToManyField(to='sridb.assessment')),
                ('building_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sridb.buildinginformation')),
                ('energy_systems', models.ManyToManyField(to='sridb.energysystem')),
                ('services', models.ManyToManyField(to='sridb.service')),
                ('sri_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sridb.srilevel')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCatalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=50)),
                ('publication_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ServiceDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_id', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=255)),
                ('technical_domain', models.CharField(choices=[('heating', 'Heating'), ('cooling', 'Cooling'), ('domestic_hot_water', 'Domestic Hot Water'), ('ventilation', 'Ventilation'), ('lighting', 'Lighting'), ('dynamic_building_envelope', 'Dynamic Building Envelope'), ('electricity', 'Electricity'), ('electric_vehicle_charging', 'Electric Vehicle Charging'), ('monitoring_control', 'Monitoring & Control')], max_length=50)),
                ('desired_impact', models.CharField(choices=[('energy_efficiency', 'Energy Efficiency'), ('maintenance_fault_prediction', 'Maintenance & Fault Prediction'), ('comfort', 'Comfort'), ('convenience', 'Convenience'), ('health', 'Health'), ('wellbeing_accessibility', 'Well-being & Accessibility'), ('information_to_occupants', 'Information to Occupants'), ('energy_flexibility_storage', 'Energy Flexibility & Storage')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_applicable', models.BooleanField(default=True)),
                ('preconditions', models.TextField(blank=True, null=True)),
                ('triage_score', models.IntegerField(default=0, help_text='0-3 score indicating if service affects maximum obtainable score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('part_a', models.BooleanField(default=False, help_text='A-1: YES, 0-NO')),
                ('part_b', models.BooleanField(default=False, help_text='B-1: YES, 0-NO')),
                ('part_c', models.BooleanField(default=False, help_text='Part of the custom services list')),
                ('catalog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='sridb.servicecatalog')),
            ],
            options={
                'ordering': ['technical_domain', 'service_id'],
            },
        ),
        migrations.CreateModel(
            name='FunctionalityLevelDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(help_text='Functionality level (0-4)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('description', models.TextField()),
                ('is_non_smart_default', models.BooleanField(default=False, help_text='Indicates if this is the non-smart default level (usually level 0)')),
                ('service_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='functionality_levels', to='sridb.servicedefinition')),
            ],
            options={
                'ordering': ['level'],
                'unique_together': {('service_definition', 'level')},
            },
        ),
        migrations.CreateModel(
            name='ServiceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('technical_domain', models.CharField(choices=[('heating', 'Heating'), ('cooling', 'Cooling'), ('domestic_hot_water', 'Domestic Hot Water'), ('ventilation', 'Ventilation'), ('lighting', 'Lighting'), ('dynamic_building_envelope', 'Dynamic Building Envelope'), ('electricity', 'Electricity'), ('electric_vehicle_charging', 'Electric Vehicle Charging'), ('monitoring_control', 'Monitoring & Control')], max_length=50)),
                ('code', models.CharField(max_length=10)),
            ],
            options={
                'unique_together': {('technical_domain', 'code')},
            },
        ),
        migrations.AddField(
            model_name='servicedefinition',
            name='service_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='sridb.servicegroup'),
        ),
        migrations.CreateModel(
            name='SRISriassessment',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('dateofassessment', models.DateTimeField(blank=True, null=True)),
                ('fullbuilding', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('assessor_assessments', models.ForeignKey(blank=True, db_column='assessor_assessments_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sri_assessments', to='sridb.sriassessor')),
                ('methodology_assessments', models.ForeignKey(blank=True, db_column='methodology_assessments_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sri_assessments', to='sridb.srimethodology')),
            ],
            options={
                'db_table': 'SRI_sriassessment',
            },
        ),
        migrations.CreateModel(
            name='SRISriservice',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='citydb.cityobject')),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('domain', models.CharField(blank=True, max_length=1000, null=True)),
                ('impact', models.CharField(blank=True, max_length=1000, null=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('partofmethod', models.IntegerField(blank=True, null=True)),
                ('partofmethodb', models.IntegerField(blank=True, null=True)),
                ('preconditions', models.CharField(blank=True, max_length=1000, null=True)),
                ('servicegroup', models.CharField(blank=True, max_length=1000, null=True)),
                ('userdefined', models.IntegerField(blank=True, null=True)),
                ('sriassessment_sriservices', models.ForeignKey(blank=True, db_column='sriassessment_sriservices_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sri_services', to='sridb.srisriassessment')),
            ],
            options={
                'db_table': 'SRI_sriservice',
            },
        ),
        migrations.AddField(
            model_name='srisriassessment',
            name='sriservice_assessments',
            field=models.ForeignKey(blank=True, db_column='sriservice_assessments_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sri_assessments', to='sridb.srisriservice'),
        ),
        migrations.CreateModel(
            name='BuildingPart',
            fields=[
                ('building_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sridb.building')),
                ('override_building_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='building_part_override', to='sridb.buildinginformation')),
                ('parent_building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='building_parts', to='sridb.building')),
            ],
            bases=('sridb.building',),
        ),
        migrations.AddField(
            model_name='building',
            name='list_of_building_parts',
            field=models.ManyToManyField(blank=True, to='sridb.buildingpart'),
        ),
        migrations.CreateModel(
            name='DomainPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(choices=[('heating', 'Heating'), ('cooling', 'Cooling'), ('domestic_hot_water', 'Domestic Hot Water'), ('ventilation', 'Ventilation'), ('lighting', 'Lighting'), ('dynamic_building_envelope', 'Dynamic Building Envelope'), ('electricity', 'Electricity'), ('electric_vehicle_charging', 'Electric Vehicle Charging'), ('monitoring_control', 'Monitoring & Control')], max_length=50)),
                ('presence_status', models.IntegerField(choices=[(1, 'Present'), (2, 'Absent but Mandatory'), (0, 'Absent and Not Mandatory')], default=0, help_text='1: Present, 2: Absent but Mandatory, 0: Absent and Not Mandatory')),
                ('weighting', models.FloatField(help_text='Domain weighting between 0 and 1', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_preferences', to='sridb.assessment')),
            ],
            options={
                'unique_together': {('assessment', 'domain')},
            },
        ),
        migrations.CreateModel(
            name='FunctionalityLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('description', models.TextField()),
                ('is_non_smart_default', models.BooleanField(default=False)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='functionality_levels', to='sridb.service')),
            ],
            options={
                'ordering': ['level'],
                'unique_together': {('service', 'level')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='servicedefinition',
            unique_together={('catalog', 'service_id')},
        ),
        migrations.CreateModel(
            name='ServiceImplementation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('implementation_date', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implemented_services', to='sridb.building')),
                ('current_functionality_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='implementations', to='sridb.functionalityleveldefinition')),
                ('service_definition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sridb.servicedefinition')),
            ],
            options={
                'unique_together': {('building', 'service_definition')},
            },
        ),
        migrations.AddIndex(
            model_name='srisriservice',
            index=models.Index(fields=['sriassessment_sriservices'], name='SRI_sriserv_sriasse_f8b634_idx'),
        ),
        migrations.AddIndex(
            model_name='srisriassessment',
            index=models.Index(fields=['assessor_assessments'], name='SRI_sriasse_assesso_6979ed_idx'),
        ),
        migrations.AddIndex(
            model_name='srisriassessment',
            index=models.Index(fields=['methodology_assessments'], name='SRI_sriasse_methodo_954855_idx'),
        ),
        migrations.AddIndex(
            model_name='srisriassessment',
            index=models.Index(fields=['sriservice_assessments'], name='SRI_sriasse_sriserv_be5cab_idx'),
        ),
    ]
